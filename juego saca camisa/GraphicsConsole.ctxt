#BlueJ class context
comment0.params=
comment0.target=GraphicsConsole()
comment1.params=
comment1.target=void\ setMenu()
comment10.params=
comment10.target=void\ doHelp()
comment11.params=
comment11.target=void\ doPrint()
comment12.params=
comment12.target=GraphicsConsole\ getInstance()
comment12.text=\r\n\ \ Obtiene\ el\ \u00FAnico\ objeto\ existente\ de\ la\ clase\ GraphicsConsole.\ \r\n\ \ Se\ aplica\ el\ patr\u00F3n\ Singleton.\r\n\ \ @return\ el\ \u00FAnico\ objeto\ GraphicsConsole\ que\ la\ clase\ permite\ crear.\r\n
comment13.params=
comment13.target=void\ beep()
comment13.text=\r\n\ Emite\ un\ sonido\ de\ atenci\u00F3n.\r\n
comment14.params=milis
comment14.target=void\ delay(long)
comment14.text=\r\n\ Provoca\ una\ pausa\ de\ "milis"\ milisegundos\ en\ la\ ejecuci\u00F3n\ del\ programa.\r\n\ @param\ milis\ la\ cantidad\ de\ milisegundos\ que\ durar\u00E1\ la\ pausa\ en\ la\ ejecuci\u00F3n.\r\n
comment15.params=x\ y\ width\ height
comment15.target=void\ clearRect(int,\ int,\ int,\ int)
comment15.text=\r\n\ Borra\ el\ contenido\ del\ \u00E1rea\ rectangular\ especificada\ por\ los\ par\u00E1metros.\ \r\n\ Los\ l\u00EDmites\ izquierdo\ y\ derecho\ del\ \u00E1rea\ rectangular\ a\ limpiar\ son\ (x)\ y\ \r\n\ (x\ +\ width)\ respectivamente.\ Los\ l\u00EDmites\ superior\ e\ inferior\ del\ rect\u00E1ngulo\ \r\n\ son\ (y)\ y\ (y\ +\ height)\ respectivamente.\ Note\ que\ el\ \u00E1rea\ ser\u00E1\ rellenada\ con\ \r\n\ el\ color\ usado\ hasta\ ese\ momento\ como\ color\ de\ dibujo\ para\ la\ ventana.\ \r\n\ @param\ x\ coordenada\ de\ columna\ del\ punto\ superior\ izquierdo\ del\ rect\u00E1ngulo.\r\n\ @param\ y\ coordenada\ de\ fila\ del\ punto\ superior\ izquierdo\ del\ rect\u00E1ngulo.\r\n\ @param\ width\ ancho\ (en\ pixels)\ del\ rect\u00E1ngulo.\r\n\ @param\ height\ alto\ (en\ pixels)\ del\ rect\u00E1ngulo.\r\n
comment16.params=x\ y\ width\ height\ dx\ dy
comment16.target=void\ copyArea(int,\ int,\ int,\ int,\ int,\ int)
comment16.text=\r\n\ Copia\ el\ contenido\ del\ \u00E1rea\ en\ el\ rect\u00E1ngulo\ indicado,\ hacia\ otra\ \u00E1rea\ \r\n\ desplazada\ en\ dx\ y\ dy\ pixels.\ El\ desplazamiento\ se\ har\u00E1\ de\ arriba\ hacia\ \r\n\ abajo\ y\ hacia\ la\ derecha.\ Si\ se\ desea\ un\ desplazamiento\ hacia\ arriba\ o\ \r\n\ hacia\ la\ izquierda,\ especifique\ valores\ negativos\ para\ dx\ y\ dy.\r\n\ Los\ l\u00EDmites\ izquierdo\ y\ derecho\ del\ \u00E1rea\ rectangular\ a\ copiar\ son\ (x)\ y\ \r\n\ (x\ +\ width)\ respectivamente.\ Los\ l\u00EDmites\ superior\ e\ inferior\ del\ rect\u00E1ngulo\ \r\n\ son\ (y)\ y\ (y\ +\ height)\ respectivamente.\ \r\n\ @param\ x\ coordenada\ de\ columna\ del\ punto\ superior\ izquierdo\ del\ rect\u00E1ngulo.\r\n\ @param\ y\ coordenada\ de\ fila\ del\ punto\ superior\ izquierdo\ del\ rect\u00E1ngulo.\r\n\ @param\ width\ ancho\ (en\ pixels)\ del\ rect\u00E1ngulo.\r\n\ @param\ height\ alto\ (en\ pixels)\ del\ rect\u00E1ngulo.\r\n\ @param\ dx\ desplazamiento\ horizontal\ para\ copiar\ los\ pixels.\r\n\ @param\ dy\ desplazamiento\ vertical\ para\ copiar\ los\ pixels.\r\n
comment17.params=x\ y\ width\ height\ raised
comment17.target=void\ draw3DRect(int,\ int,\ int,\ int,\ boolean)
comment17.text=\r\n\ Dibuja\ el\ contorno\ de\ un\ rect\u00E1ngulo\ con\ bordes\ trabajados\ para\ simular\ un\ \r\n\ efecto\ de\ sobre\ relieve\ (raised\ \=\ true)\ o\ bajo\ relieve\ (raised\ \=\ false).\r\n\ Los\ l\u00EDmites\ izquierdo\ y\ derecho\ del\ rect\u00E1ngulo\ son\ (x)\ y\ (x\ +\ width)\ \r\n\ respectivamente,\ aunque\ gr\u00E1ficamente\ el\ rect\u00E1ngulo\ acupar\u00E1\ un\ \u00E1rea\ que\ \r\n\ llegar\u00E1\ hasta\ (width\ +\ 1)\ y\ (height\ +\ 1).\ Los\ l\u00EDmites\ superior\ e\ inferior\ \r\n\ del\ rect\u00E1ngulo\ son\ (y)\ y\ (y\ +\ height)\ respectivamente.\ El\ color\ usado\ ser\u00E1\ \r\n\ el\ que\ en\ ese\ momento\ est\u00E9\ fijado\ como\ color\ de\ dibujo\ para\ la\ ventana.\r\n\ @param\ x\ coordenada\ de\ columna\ del\ punto\ superior\ izquierdo\ del\ rect\u00E1ngulo.\r\n\ @param\ y\ coordenada\ de\ fila\ del\ punto\ superior\ izquierdo\ del\ rect\u00E1ngulo.\r\n\ @param\ width\ ancho\ (en\ pixels)\ del\ rect\u00E1ngulo.\r\n\ @param\ height\ alto\ (en\ pixels)\ del\ rect\u00E1ngulo.\r\n\ @param\ raised\ un\ boolean\ para\ indicar\ si\ el\ rect\u00E1ngulo\ debe\ aparecer\ elevado\ o\r\n\ hundido\ en\ la\ ventana.\r\n
comment18.params=x\ y\ width\ height\ startAngle\ arcAngle
comment18.target=void\ drawArc(int,\ int,\ int,\ int,\ int,\ int)
comment18.text=\r\n\ Dibuja\ el\ contorno\ de\ un\ arco\ circular\ o\ el\u00EDptico,\ dentro\ de\ los\ l\u00EDmites\ \r\n\ del\ rect\u00E1ngulo\ indicado.\ Los\ l\u00EDmites\ izquierdo\ y\ derecho\ del\ rect\u00E1ngulo\ \r\n\ son\ (x)\ y\ (x\ +\ width)\ respectivamente.\ Los\ l\u00EDmites\ superior\ e\ inferior\ \r\n\ del\ rect\u00E1ngulo\ son\ (y)\ y\ (y\ +\ height)\ respectivamente.\ El\ arco\ comienza\ \r\n\ a\ dibujarse\ desde\ el\ \u00E1ngulo\ indicado\ por\ (startAngle)\ y\ proseguir\u00E1\ hasta\r\n\ barrer\ un\ \u00E1ngulo\ equivalente\ a\ (arcAngle).\ El\ color\ usado\ ser\u00E1\ el\ que\ en\ \r\n\ ese\ momento\ est\u00E9\ fijado\ como\ color\ de\ dibujo\ para\ la\ ventana.\r\n\ @param\ x\ coordenada\ de\ columna\ del\ punto\ superior\ izquierdo\ del\ rect\u00E1ngulo.\r\n\ @param\ y\ coordenada\ de\ fila\ del\ punto\ superior\ izquierdo\ del\ rect\u00E1ngulo.\r\n\ @param\ width\ ancho\ (en\ pixels)\ del\ rect\u00E1ngulo.\r\n\ @param\ height\ alto\ (en\ pixels)\ del\ rect\u00E1ngulo.\r\n\ @param\ startAngle\ el\ \u00E1ngulo\ de\ inicio\ del\ arco\ a\ dibujar.\r\n\ @param\ arcAngle\ el\ \u00E1ngulo\ que\ ser\u00E1\ barrido\ por\ el\ arco.\r\n
comment19.params=img\ x\ y
comment19.target=boolean\ drawImage(java.lang.String,\ int,\ int)
comment19.text=\r\n\ Despliega\ tanto\ como\ sea\ posible\ una\ imagen,\ comenzando\ desde\ el\ punto\ \r\n\ superior\ izquierdo\ cuyas\ coordenadas\ son\ (x,\ y).\ Si\ el\ m\u00E9todo\ logr\u00F3\ cargar\ \r\n\ la\ imagen\ completamente,\ retorna\ true.\ Si\ no\ logr\u00F3\ cargar\ por\ completo\ la\ \r\n\ imagen,\ retorna\ false.\ El\ par\u00E1metro\ img\ indica\ el\ nombre\ del\ archivo\ que\r\n\ contiene\ a\ la\ imagen\ (que\ puede\ ser\ de\ tipo\ img,\ jpeg\ o\ png).\ Si\ no\ se\ indica\ \r\n\ la\ ruta\ de\ directorios\ de\ ese\ archivo,\ se\ supondr\u00E1\ que\ el\ mismo\ est\u00E1\ en\ la\ \r\n\ carpeta\ del\ proyecto.\r\n\ @param\ img\ el\ nombre\ del\ archivo\ que\ contiene\ a\ la\ imagen.\r\n\ @param\ x\ coordenada\ de\ columna\ del\ punto\ superior\ izquierdo\ de\ la\ imagen.\r\n\ @param\ y\ coordenada\ de\ fila\ del\ punto\ superior\ izquierdo.\ \r\n
comment2.params=e
comment2.target=void\ actionPerformed(java.awt.event.ActionEvent)
comment20.params=img\ x\ y\ width\ height
comment20.target=boolean\ drawImage(java.lang.String,\ int,\ int,\ int,\ int)
comment20.text=\r\n\ Despliega\ tanto\ como\ sea\ posible\ una\ imagen,\ comenzando\ desde\ el\ punto\ \r\n\ superior\ izquierdo\ cuyas\ coordenadas\ son\ (x,\ y).\ Si\ el\ m\u00E9todo\ logr\u00F3\ cargar\ \r\n\ la\ imagen\ completamente,\ retorna\ true.\ Si\ no\ logr\u00F3\ cargar\ por\ completo\ la\ \r\n\ imagen,\ retorna\ false.\ El\ par\u00E1metro\ img\ indica\ el\ nombre\ del\ archivo\ que\r\n\ contiene\ a\ la\ imagen\ que\ puede\ ser\ de\ tipo\ img,\ jpeg\ o\ png).\ Si\ no\ se\ indica\ \r\n\ la\ ruta\ de\ directorios\ de\ ese\ archivo,\ se\ supondr\u00E1\ que\ el\ mismo\ est\u00E1\ en\ la\ \r\n\ carpeta\ del\ proyecto.\r\n\ @param\ img\ el\ nombre\ del\ archivo\ que\ contiene\ a\ la\ imagen.\r\n\ @param\ x\ coordenada\ de\ columna\ del\ punto\ superior\ izquierdo\ de\ la\ imagen.\r\n\ @param\ y\ coordenada\ de\ fila\ del\ punto\ superior\ izquierdo.\ \r\n\ @param\ width\ el\ ancho\ del\ rect\u00E1ngulo\ que\ contendr\u00E1\ a\ la\ imagen.\r\n\ @param\ height\ el\ alto\ del\ rect\u00E1ngulo.\r\n
comment21.params=x1\ y1\ x2\ y2
comment21.target=void\ drawLine(int,\ int,\ int,\ int)
comment21.text=\r\n\ Dibuja\ una\ l\u00EDnea,\ comenzando\ desde\ el\ punto\ (x1,\ y1)\ y\ terminando\ en\ el\ \r\n\ punto\ (x2,\ y2).\ El\ color\ usado\ ser\u00E1\ el\ que\ en\ ese\ momento\ est\u00E9\ fijado\ como\ \r\n\ color\ de\ dibujo\ para\ la\ ventana.\r\n\ @param\ x1\ coordenada\ de\ columna\ del\ punto\ inicial\ de\ la\ l\u00EDnea.\r\n\ @param\ y1\ coordenada\ de\ fila\ del\ punto\ inicial.\r\n\ @param\ x2\ coordenada\ de\ columna\ del\ punto\ final\ de\ la\ l\u00EDnea.\r\n\ @param\ y2\ coordenada\ de\ fila\ del\ punto\ final.\r\n
comment22.params=x\ y\ width\ height
comment22.target=void\ drawOval(int,\ int,\ int,\ int)
comment22.text=\r\n\ Dibuja\ el\ contorno\ de\ un\ c\u00EDrculo\ o\ de\ una\ elipse,\ inscripta\ en\ el\ rect\u00E1ngulo\r\n\ dado.\ Los\ l\u00EDmites\ izquierdo\ y\ derecho\ del\ rect\u00E1ngulo\ son\ (x)\ y\ (x\ +\ width)\ \r\n\ respectivamente.\ Los\ l\u00EDmites\ superior\ e\ inferior\ del\ rect\u00E1ngulo\ son\ (y)\ y\ \r\n\ (y\ +\ height)\ respectivamente.\ El\ color\ usado\ ser\u00E1\ el\ que\ en\ ese\ momento\ est\u00E9\ \r\n\ fijado\ como\ color\ de\ dibujo\ para\ la\ ventana.\r\n\ @param\ x\ coordenada\ de\ columna\ del\ punto\ superior\ izquierdo\ del\ rect\u00E1ngulo.\r\n\ @param\ y\ coordenada\ de\ fila\ del\ punto\ superior\ izquierdo\ del\ rect\u00E1ngulo.\r\n\ @param\ width\ ancho\ (en\ pixels)\ del\ rect\u00E1ngulo.\r\n\ @param\ height\ alto\ (en\ pixels)\ del\ rect\u00E1ngulo.\r\n
comment23.params=xPoints\ yPoints\ n
comment23.target=void\ drawPolygon(int[],\ int[],\ int)
comment23.text=\r\n\ Dibuja\ un\ pol\u00EDgono\ cerrado\ con\ (n)\ puntos\ a\ modo\ de\ v\u00E9rtices.\ Las\ \r\n\ coordenadas\ (x,\ y)\ de\ cada\ uno\ de\ los\ (n)\ puntos\ est\u00E1n\ dadas\ por\ los\ \r\n\ arreglos\ (xPoints)\ e\ (yPoints).\ Autom\u00E1ticamente\ ser\u00E1\ trazada\ una\ l\u00EDnea\r\n\ para\ unir\ el\ \u00FAltimo\ punto\ con\ el\ primero,\ salvo\ que\ se\ trate\ del\ mismo\ \r\n\ punto.\ El\ color\ usado\ ser\u00E1\ el\ que\ en\ ese\ momento\ est\u00E9\ fijado\ como\ color\ \r\n\ de\ dibujo\ para\ la\ ventana.\r\n\ @param\ xPoints\ un\ arreglo\ con\ los\ valores\ de\ las\ coordenadas\ de\ columna\ de\r\n\ los\ puntos\ v\u00E9rtice\ del\ pol\u00EDgono.\r\n\ @param\ yPoints\ un\ arreglo\ con\ los\ valores\ de\ las\ coordenadas\ de\ fila\ de\r\n\ los\ puntos\ v\u00E9rtice\ del\ pol\u00EDgono.\r\n\ @param\ n\ la\ cantidad\ de\ puntos\ a\ usar\ para\ dibujar\ el\ poligono.\r\n
comment24.params=x\ y\ width\ height
comment24.target=void\ drawRect(int,\ int,\ int,\ int)
comment24.text=\r\n\ Dibuja\ el\ contorno\ de\ un\ rect\u00E1ngulo.\ Los\ l\u00EDmites\ izquierdo\ y\ derecho\ del\ \r\n\ rect\u00E1ngulo\ son\ (x)\ y\ (x\ +\ width)\ respectivamente.\ Los\ l\u00EDmites\ superior\ e\ \r\n\ inferior\ del\ rect\u00E1ngulo\ son\ (y)\ y\ (y\ +\ height)\ respectivamente.\ El\ color\r\n\ usado\ ser\u00E1\ el\ que\ en\ ese\ momento\ est\u00E9\ fijado\ como\ color\ de\ dibujo\ para\r\n\ la\ ventana.\r\n\ @param\ x\ coordenada\ de\ columna\ del\ punto\ superior\ izquierdo\ del\ rect\u00E1ngulo.\r\n\ @param\ y\ coordenada\ de\ fila\ del\ punto\ superior\ izquierdo\ del\ rect\u00E1ngulo.\r\n\ @param\ width\ ancho\ (en\ pixels)\ del\ rect\u00E1ngulo.\r\n\ @param\ height\ alto\ (en\ pixels)\ del\ rect\u00E1ngulo.\r\n
comment25.params=x\ y\ width\ height\ arcWidth\ arcHeight
comment25.target=void\ drawRoundRect(int,\ int,\ int,\ int,\ int,\ int)
comment25.text=\r\n\ Dibuja\ el\ contorno\ de\ un\ rect\u00E1ngulo\ con\ bordes\ redondeados.\ Los\ l\u00EDmites\ \r\n\ izquierdo\ y\ derecho\ del\ rect\u00E1ngulo\ son\ (x)\ y\ (x\ +\ width)\ respectivamente.\ \r\n\ Los\ l\u00EDmites\ superior\ e\ inferior\ del\ rect\u00E1ngulo\ son\ (y)\ y\ (y\ +\ height)\ \r\n\ respectivamente.\ El\ color\ usado\ ser\u00E1\ el\ que\ en\ ese\ momento\ est\u00E9\ fijado\ \r\n\ como\ color\ de\ dibujo\ para\ la\ ventana.\r\n\ @param\ x\ coordenada\ de\ columna\ del\ punto\ superior\ izquierdo\ del\ rect\u00E1ngulo.\r\n\ @param\ y\ coordenada\ de\ fila\ del\ punto\ superior\ izquierdo\ del\ rect\u00E1ngulo.\r\n\ @param\ width\ ancho\ (en\ pixels)\ del\ rect\u00E1ngulo.\r\n\ @param\ height\ alto\ (en\ pixels)\ del\ rect\u00E1ngulo.\r\n\ @param\ arcWidth\ di\u00E1metro\ horizontal\ del\ arco\ usado\ en\ cada\ esquina.\r\n\ @param\ arcHeight\ di\u00E1metro\ vertical\ del\ arco\ usado\ en\ cada\ esquina.\r\n
comment26.params=s\ x\ y
comment26.target=void\ drawString(java.lang.String,\ int,\ int)
comment26.text=\r\n\ Dibuja\ (muestra...)\ el\ contenido\ de\ la\ cadena\ (s)\ usando\ la\ fuente\ y\ el\ color\r\n\ actualmente\ activados\ en\ la\ ventana.\ La\ l\u00EDnea\ base\ del\ caracter\ m\u00E1s\ a\ la\ izquierda\r\n\ de\ la\ cadena\ se\ ubicar\u00E1\ en\ la\ posici\u00F3n\ (x,\ y).\ \ \r\n\ @param\ s\ la\ cadena\ a\ dibujar.\r\n\ @param\ x\ la\ coordenada\ x\ (columna).\r\n\ @param\ y\ la\ coordenada\ y\ (fila).\ \r\n
comment27.params=x\ y\ width\ height\ raised
comment27.target=void\ fill3DRect(int,\ int,\ int,\ int,\ boolean)
comment27.text=\r\n\ Dibuja\ y\ rellena\ (pinta\ por\ dentro)\ un\ rect\u00E1ngulo\ con\ bordes\ trabajados\ \r\n\ para\ simular\ un\ efecto\ de\ sobre\ relieve\ (raised\ \=\ true)\ o\ bajo\ relieve\ \r\n\ (raised\ \=\ false).\ Los\ l\u00EDmites\ izquierdo\ y\ derecho\ del\ rect\u00E1ngulo\ son\ (x)\ \r\n\ y\ (x\ +\ width)\ respectivamente,\ aunque\ gr\u00E1ficamente\ el\ rect\u00E1ngulo\ acupar\u00E1\ un\ \r\n\ \u00E1rea\ que\ llegar\u00E1\ hasta\ (width\ +\ 1)\ y\ (height\ +\ 1).\ Los\ l\u00EDmites\ superior\ e\ \r\n\ inferior\ del\ rect\u00E1ngulo\ son\ (y)\ y\ (y\ +\ height)\ respectivamente.\ El\ color\ \r\n\ usado\ ser\u00E1\ el\ que\ en\ ese\ momento\ est\u00E9\ fijado\ como\ color\ de\ dibujo\ para\ la\ \r\n\ ventana.\r\n\ @param\ x\ coordenada\ de\ columna\ del\ punto\ superior\ izquierdo\ del\ rect\u00E1ngulo.\r\n\ @param\ y\ coordenada\ de\ fila\ del\ punto\ superior\ izquierdo\ del\ rect\u00E1ngulo.\r\n\ @param\ width\ ancho\ (en\ pixels)\ del\ rect\u00E1ngulo.\r\n\ @param\ height\ alto\ (en\ pixels)\ del\ rect\u00E1ngulo.\r\n\ @param\ raised\ un\ boolean\ para\ indicar\ si\ el\ rect\u00E1ngulo\ debe\ aparecer\ elevado\ o\r\n\ hundido\ en\ la\ ventana.\r\n
comment28.params=x\ y\ width\ height\ startAngle\ arcAngle
comment28.target=void\ fillArc(int,\ int,\ int,\ int,\ int,\ int)
comment28.text=\r\n\ Dibuja\ y\ rellena\ un\ arco\ circular\ o\ el\u00EDptico,\ dentro\ de\ los\ l\u00EDmites\ del\ \r\n\ rect\u00E1ngulo\ indicado.\ Los\ l\u00EDmites\ izquierdo\ y\ derecho\ del\ rect\u00E1ngulo\ son\ (x)\ \r\n\ y\ (x\ +\ width)\ respectivamente.\ Los\ l\u00EDmites\ superior\ e\ inferior\ del\ rect\u00E1ngulo\ \r\n\ son\ (y)\ y\ (y\ +\ height)\ respectivamente.\ El\ arco\ comienza\ a\ dibujarse\ desde\ el\ \r\n\ \u00E1ngulo\ indicado\ por\ (startAngle)\ y\ proseguir\u00E1\ hasta\ barrer\ un\ \u00E1ngulo\ equivalente\ \r\n\ a\ (arcAngle).\ El\ color\ usado\ ser\u00E1\ el\ que\ en\ ese\ momento\ est\u00E9\ fijado\ como\ color\ \r\n\ de\ dibujo\ para\ la\ ventana.\r\n\ @param\ x\ coordenada\ de\ columna\ del\ punto\ superior\ izquierdo\ del\ rect\u00E1ngulo.\r\n\ @param\ y\ coordenada\ de\ fila\ del\ punto\ superior\ izquierdo\ del\ rect\u00E1ngulo.\r\n\ @param\ width\ ancho\ (en\ pixels)\ del\ rect\u00E1ngulo.\r\n\ @param\ height\ alto\ (en\ pixels)\ del\ rect\u00E1ngulo.\r\n\ @param\ startAngle\ el\ \u00E1ngulo\ de\ inicio\ del\ arco\ a\ dibujar.\r\n\ @param\ arcAngle\ el\ \u00E1ngulo\ que\ ser\u00E1\ barrido\ por\ el\ arco.\r\n
comment29.params=x\ y\ width\ height
comment29.target=void\ fillOval(int,\ int,\ int,\ int)
comment29.text=\r\n\ Dibuja\ un\ c\u00EDrculo\ o\ una\ elipse,\ pintada\ por\ dentro\ e\ inscripta\ en\ el\ rect\u00E1ngulo\r\n\ dado.\ Los\ l\u00EDmites\ izquierdo\ y\ derecho\ del\ rect\u00E1ngulo\ son\ (x)\ y\ (x\ +\ width)\ \r\n\ respectivamente.\ Los\ l\u00EDmites\ superior\ e\ inferior\ del\ rect\u00E1ngulo\ son\ (y)\ y\ \r\n\ (y\ +\ height)\ respectivamente.\ El\ color\ usado\ ser\u00E1\ el\ que\ en\ ese\ momento\ est\u00E9\ \r\n\ fijado\ como\ color\ de\ dibujo\ para\ la\ ventana.\r\n\ @param\ x\ coordenada\ de\ columna\ del\ punto\ superior\ izquierdo\ del\ rect\u00E1ngulo.\r\n\ @param\ y\ coordenada\ de\ fila\ del\ punto\ superior\ izquierdo\ del\ rect\u00E1ngulo.\r\n\ @param\ width\ ancho\ (en\ pixels)\ del\ rect\u00E1ngulo.\r\n\ @param\ height\ alto\ (en\ pixels)\ del\ rect\u00E1ngulo.\r\n
comment3.params=e
comment3.target=void\ actionPerformed(java.awt.event.ActionEvent)
comment30.params=xPoints\ yPoints\ n
comment30.target=void\ fillPolygon(int[],\ int[],\ int)
comment30.text=\r\n\ Dibuja\ un\ pol\u00EDgono\ cerrado\ y\ pintado\ por\ dentro\ con\ (n)\ puntos\ a\ modo\ \r\n\ de\ v\u00E9rtices.\ Las\ coordenadas\ (x,\ y)\ de\ cada\ uno\ de\ los\ (n)\ puntos\ est\u00E1n\ \r\n\ dadas\ por\ los\ arreglos\ (xPoints)\ e\ (yPoints).\ Autom\u00E1ticamente\ ser\u00E1\ trazada\ \r\n\ una\ l\u00EDnea\ para\ unir\ el\ \u00FAltimo\ punto\ con\ el\ primero,\ salvo\ que\ se\ trate\ del\ \r\n\ mismo\ punto.\ El\ color\ usado\ ser\u00E1\ el\ que\ en\ ese\ momento\ est\u00E9\ fijado\ como\ color\ \r\n\ de\ dibujo\ para\ la\ ventana.\r\n\ @param\ xPoints\ un\ arreglo\ con\ los\ valores\ de\ las\ coordenadas\ de\ columna\ de\r\n\ los\ puntos\ v\u00E9rtice\ del\ pol\u00EDgono.\r\n\ @param\ yPoints\ un\ arreglo\ con\ los\ valores\ de\ las\ coordenadas\ de\ fila\ de\r\n\ los\ puntos\ v\u00E9rtice\ del\ pol\u00EDgono.\r\n\ @param\ n\ la\ cantidad\ de\ puntos\ a\ usar\ para\ dibujar\ el\ poligono.\r\n
comment31.params=x\ y\ width\ height
comment31.target=void\ fillRect(int,\ int,\ int,\ int)
comment31.text=\r\n\ Dibuja\ un\ rect\u00E1ngulo\ pintado\ por\ dentro.\ Los\ l\u00EDmites\ izquierdo\ y\ derecho\ del\ \r\n\ rect\u00E1ngulo\ son\ (x)\ y\ (x\ +\ width)\ respectivamente.\ Los\ l\u00EDmites\ superior\ e\ \r\n\ inferior\ del\ rect\u00E1ngulo\ son\ (y)\ y\ (y\ +\ height)\ respectivamente.\ El\ color\r\n\ usado\ ser\u00E1\ el\ que\ en\ ese\ momento\ est\u00E9\ fijado\ como\ color\ de\ dibujo\ para\r\n\ la\ ventana.\r\n\ @param\ x\ coordenada\ de\ columna\ del\ punto\ superior\ izquierdo\ del\ rect\u00E1ngulo.\r\n\ @param\ y\ coordenada\ de\ fila\ del\ punto\ superior\ izquierdo\ del\ rect\u00E1ngulo.\r\n\ @param\ width\ ancho\ (en\ pixels)\ del\ rect\u00E1ngulo.\r\n\ @param\ height\ alto\ (en\ pixels)\ del\ rect\u00E1ngulo.\r\n
comment32.params=x\ y\ width\ height\ arcWidth\ arcHeight
comment32.target=void\ fillRoundRect(int,\ int,\ int,\ int,\ int,\ int)
comment32.text=\r\n\ Dibuja\ un\ rect\u00E1ngulo\ pintado\ por\ dentro,\ con\ los\ bordes\ redondeados.\ Los\ \r\n\ l\u00EDmites\ izquierdo\ y\ derecho\ del\ rect\u00E1ngulo\ son\ (x)\ y\ (x\ +\ width)\ \r\n\ respectivamente.\ Los\ l\u00EDmites\ superior\ e\ inferior\ del\ rect\u00E1ngulo\ son\ (y)\ \r\n\ y\ (y\ +\ height)\ respectivamente.\ El\ color\ usado\ ser\u00E1\ el\ que\ en\ ese\ momento\ \r\n\ est\u00E9\ fijado\ como\ color\ de\ dibujo\ para\ la\ ventana.\r\n\ @param\ x\ coordenada\ de\ columna\ del\ punto\ superior\ izquierdo\ del\ rect\u00E1ngulo.\r\n\ @param\ y\ coordenada\ de\ fila\ del\ punto\ superior\ izquierdo\ del\ rect\u00E1ngulo.\r\n\ @param\ width\ ancho\ (en\ pixels)\ del\ rect\u00E1ngulo.\r\n\ @param\ height\ alto\ (en\ pixels)\ del\ rect\u00E1ngulo.\r\n\ @param\ arcWidth\ di\u00E1metro\ horizontal\ del\ arco\ usado\ en\ cada\ esquina.\r\n\ @param\ arcHeight\ di\u00E1metro\ vertical\ del\ arco\ usado\ en\ cada\ esquina.\r\n
comment33.params=
comment33.target=java.awt.Color\ getColor()
comment33.text=\r\n\ Retorna\ el\ color\ actualmente\ usado\ en\ esta\ ventana.\r\n\ @return\ un\ objeto\ Color\ que\ representa\ al\ color\ actual.\r\n
comment34.params=
comment34.target=java.awt.Font\ getFont()
comment34.text=\r\n\ Retorna\ la\ fuente\ de\ caracteres\ actualmente\ usada\ en\ esta\ ventana.\r\n\ @return\ un\ objeto\ Font\ que\ representa\ a\ la\ fuente\ actual.\r\n
comment35.params=
comment35.target=java.awt.FontMetrics\ getFontMetrics()
comment35.text=\r\n\ Retorna\ las\ m\u00E9tricas\ de\ la\ fuente\ de\ caracteres\ actualmente\ usada\ en\ \r\n\ esta\ ventana.\r\n\ @return\ un\ objeto\ FontMetrics\ que\ permite\ acceder\ a\ las\ propiedades\ de\ la\ \r\n\ fuente\ actual.\r\n
comment36.params=c
comment36.target=void\ setColor(java.awt.Color)
comment36.text=\r\n\ Cambia\ el\ color\ de\ dibujo.\ El\ color\ usado\ desde\ la\ invocaci\u00F3n\ a\ este\ m\u00E9todo\ \r\n\ en\ adelante,\ ser\u00E1\ el\ color\ (c)\ tomado\ como\ par\u00E1metro.\r\n\ @param\ c\ el\ nuevo\ color\ a\ usar.\r\n
comment37.params=f
comment37.target=void\ setFont(java.awt.Font)
comment37.text=\r\n\ Cambia\ el\ tipo\ de\ fuente\ usado\ para\ mostrar\ texto\ en\ esta\ ventana.\r\n\ @param\ f\ un\ objeto\ representando\ a\ la\ nueva\ fuente.\r\n
comment38.params=x\ y
comment38.target=void\ translate(int,\ int)
comment38.text=\r\n\ Cambia\ origen\ de\ coordenadas\ del\ contexto\ gr\u00E1fico\ usado,\ de\ forma\ que\ el\ \r\n\ nuevo\ origen\ coincidir\u00E1\ con\ (x,\ y).\ Todas\ las\ coordenadas\ usadas\ de\ aqu\u00ED\ \r\n\ en\ adelante\ ser\u00E1n\ relativas\ al\ nuevo\ origen.\r\n\ @param\ x\ la\ coordenada\ x\ del\ nuevo\ origen.\r\n\ @param\ y\ la\ coordenada\ x\ del\ nuevo\ origen.\r\n
comment39.params=
comment39.target=int\ getWidth()
comment39.text=\ \r\n\ Ancho\ de\ pantalla\ \r\n\ @return\ Ancho\ Scream\r\n
comment4.params=e
comment4.target=void\ actionPerformed(java.awt.event.ActionEvent)
comment40.params=
comment40.target=int\ getHeight()
comment40.text=\ \r\n\ Altura\ de\ pantalla\ \r\n\ @return\ Altura\ Scream\r\n
comment41.params=
comment41.target=void\ lockMaxScream()
comment42.params=url
comment42.target=void\ drawGif(java.lang.String)
comment5.params=
comment5.target=void\ setInitialLook()
comment6.params=
comment6.target=void\ initGraphicArea()
comment7.params=
comment7.target=void\ initButton()
comment8.params=e
comment8.target=void\ actionPerformed(java.awt.event.ActionEvent)
comment9.params=
comment9.target=void\ doExit()
numComments=43
